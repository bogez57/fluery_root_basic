////////////////////////////////
//~ rjf: Tables

@table(name_upper, name_lower, type)
R_D3D11_CmdGlobalsTable:
{
 {Rect2D            rect2d            R_D3D11_CmdGlobals_Rect2D           }
 {Sprite3D          sprite3d          R_D3D11_CmdGlobals_Sprite3D         }
 {CompositeUnlit3D  compositeunlit3d  R_D3D11_CmdGlobals_CompositeUnlit3D }
 {PointLight3D      pointlight3d      R_D3D11_CmdGlobals_PointLight3D     }
 {CompositeLit3D    compositelit3d    R_D3D11_CmdGlobals_CompositeLit3D   }
 {DebugLine3D       debugline3d       R_D3D11_CmdGlobals_DebugLine3D      }
}

@table(name_upper, name_lower, shader_blob, element_desc_table)
R_D3D11_ShaderPairTable:
{
 {Rect2D            rect2d             r_d3d11_g_rect2d_shader_src            r_d3d11_g_rect2d_ilay_elements       }
 {Sprite3D          sprite3d           r_d3d11_g_sprite3d_shader_src          r_d3d11_g_sprite3d_ilay_elements     }
 {CompositeUnlit3D  compositeunlit3d   r_d3d11_g_compositeunlit3d_shader_src  /                                    }
 {PointLight3D      pointlight3d       r_d3d11_g_pointlight3d_shader_src      r_d3d11_g_pointlight3d_ilay_elements }
 {FramebufferBlit   framebufferblit    r_d3d11_g_framebufferblit_shader_src   /                                    }
 {CompositeLit3D    compositelit3d     r_d3d11_g_compositelit3d_shader_src    /                                    }
 {DebugLine3D       debugline3d        r_d3d11_g_debugline3d_shader_src       r_d3d11_g_debugline3d_ilay_elements  }
}

////////////////////////////////
//~ rjf: Table Generators

@enum R_D3D11_CmdGlobalKind:
{
 Nil;
 @expand(R_D3D11_CmdGlobalsTable a) `$(a.name_upper)`;
 COUNT;
}

@enum R_D3D11_ShaderPairKind:
{
 Nil;
 @expand(R_D3D11_ShaderPairTable a) `$(a.name_upper)`;
 COUNT;
}

@data(R_D3D11_CmdGlobalKindInfo)
r_d3d11_g_cmd_global_kind_info_table:
{
 `{0}`;
 @expand(R_D3D11_CmdGlobalsTable a) `{sizeof($(a.type))}`;
}

@data(R_D3D11_ShaderPairKindInfo)
r_d3d11_g_shader_pair_kind_info_table:
{
 `{0}`;
 @expand(R_D3D11_ShaderPairTable a) `{Str8LitComp("$(a.shader_blob)"), $(a.shader_blob), $(a.element_desc_table != "/" ?? a.element_desc_table) $(a.element_desc_table == "/" ?? "0"), $(a.element_desc_table != "/" ?? "ArrayCount(" .. a.element_desc_table .. ")") $(a.element_desc_table == "/" ?? "0")}`;
}

////////////////////////////////
//~ rjf: Rect Shaders

@embed_string @c r_d3d11_g_rect2d_shader_src:
"""
//- rjf: resources

cbuffer CmdGlobals : register(b0)
{
 float2 viewport_size_px;
 float opacity;
 row_major float4x4 albedo_sample_channel_map;
 float2 albedo_t2d_size_px;
 row_major float3x3 xform;
 float2 xform_scale;
}

Texture2D albedo_t2d : register(t0);
SamplerState albedo_t2d_sampler : register(s0);

//- rjf: cpu -> vshad -> pshad types

struct CPU2Vertex
{
 float4 dst_rect_px     : POS;
 float4 src_rect_px     : TEX;
 float4 color00         : COL0;
 float4 color01         : COL1;
 float4 color10         : COL2;
 float4 color11         : COL3;
 float4 corner_radii_px : CRAD;
 float4 style_params    : STY; // x: border_thickness_px, y: softness_px, z: omit_texture, w: unused
 uint vertex_id         : SV_VertexID;
};

struct Vertex2Pixel
{
 float4 position           : SV_POSITION;
 float2 rect_half_size_px  : PSIZE;
 float2 texcoord_pct       : TEX;
 float2 cornercoord_pct    : COLC;
 float4 color00            : COL0;
 float4 color01            : COL1;
 float4 color10            : COL2;
 float4 color11            : COL3;
 float corner_radius_px    : CRAD;
 float border_thickness_px : BTHC;
 float softness_px         : SFT;
 float omit_texture        : OTX;
};

//- rjf: helpers

float RectSDF(float2 sample_pos, float2 rect_half_size, float r)
{
 return length(max(abs(sample_pos) - rect_half_size + r, 0.0)) - r;
}

//- rjf: vertex shader

Vertex2Pixel
vs_main(CPU2Vertex cpu2vertex)
{
 //- rjf: unpack & xform rectangle src/dst vertices
 float2 dst_p0_px  = cpu2vertex.dst_rect_px.xy;
 float2 dst_p1_px  = cpu2vertex.dst_rect_px.zw;
 float2 src_p0_px  = cpu2vertex.src_rect_px.xy;
 float2 src_p1_px  = cpu2vertex.src_rect_px.zw;
 float2 dst_size_px = abs(dst_p1_px - dst_p0_px);
 
 //- rjf: unpack style params
 float border_thickness_px = cpu2vertex.style_params.x;
 float softness_px         = cpu2vertex.style_params.y;
 float omit_texture        = cpu2vertex.style_params.z;
 
 //- rjf: prep per-vertex arrays to sample from (p: position, t: texcoord, c: colorcoord, r: cornerradius)
 float2 dst_p_verts_px[] =
 {
  mul(xform, float3(dst_p0_px.x, dst_p1_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),
  mul(xform, float3(dst_p0_px.x, dst_p0_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),
  mul(xform, float3(dst_p1_px.x, dst_p1_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),
  mul(xform, float3(dst_p1_px.x, dst_p0_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),
 };
 float2 src_p_verts_pct[] =
 {
  float2(src_p0_px.x/albedo_t2d_size_px.x, src_p1_px.y/albedo_t2d_size_px.y),
  float2(src_p0_px.x/albedo_t2d_size_px.x, src_p0_px.y/albedo_t2d_size_px.y),
  float2(src_p1_px.x/albedo_t2d_size_px.x, src_p1_px.y/albedo_t2d_size_px.y),
  float2(src_p1_px.x/albedo_t2d_size_px.x, src_p0_px.y/albedo_t2d_size_px.y),
 };
 float2 dst_c_verts_pct[] =
 {
  float2(0, 1),
  float2(0, 0),
  float2(1, 1),
  float2(1, 0),
 };
 float dst_r_verts_px[] =
 {
  cpu2vertex.corner_radii_px.y,
  cpu2vertex.corner_radii_px.x,
  cpu2vertex.corner_radii_px.w,
  cpu2vertex.corner_radii_px.z,
 };
 
 // rjf: fill vertex -> pixel data
 Vertex2Pixel vertex2pixel;
 {
  vertex2pixel.position.x           = 2 * dst_p_verts_px[cpu2vertex.vertex_id].x / viewport_size_px.x - 1.f;
  vertex2pixel.position.y           = 2 * dst_p_verts_px[cpu2vertex.vertex_id].y / viewport_size_px.y - 1.f;
  vertex2pixel.position.z           = 0.f;
  vertex2pixel.position.w           = 1.f;
  vertex2pixel.rect_half_size_px    = dst_size_px/2 * xform_scale;
  vertex2pixel.texcoord_pct         = src_p_verts_pct[cpu2vertex.vertex_id];
  vertex2pixel.cornercoord_pct      = dst_c_verts_pct[cpu2vertex.vertex_id];
  vertex2pixel.color00              = cpu2vertex.color00;
  vertex2pixel.color01              = cpu2vertex.color01;
  vertex2pixel.color10              = cpu2vertex.color10;
  vertex2pixel.color11              = cpu2vertex.color11;
  vertex2pixel.corner_radius_px     = dst_r_verts_px[cpu2vertex.vertex_id];
  vertex2pixel.border_thickness_px  = border_thickness_px;
  vertex2pixel.softness_px          = softness_px;
  vertex2pixel.omit_texture         = omit_texture;
 }
 return vertex2pixel;
}

//- rjf: pixel shader

float4
ps_main(Vertex2Pixel vertex2pixel) : SV_TARGET
{
 // rjf: blend corner colors to produce final tint
 float4 top_color   = (1-vertex2pixel.cornercoord_pct.x)*vertex2pixel.color00 + (vertex2pixel.cornercoord_pct.x)*vertex2pixel.color10;
 float4 bot_color   = (1-vertex2pixel.cornercoord_pct.x)*vertex2pixel.color01 + (vertex2pixel.cornercoord_pct.x)*vertex2pixel.color11;
 float4 tint        = (1-vertex2pixel.cornercoord_pct.y)*top_color + (vertex2pixel.cornercoord_pct.y)*bot_color;
 
 // rjf: sample albedo
 float4 albedo_sample = float4(1, 1, 1, 1);
 if(vertex2pixel.omit_texture < 1)
 {
  albedo_sample = mul(albedo_t2d.Sample(albedo_t2d_sampler, vertex2pixel.texcoord_pct), albedo_sample_channel_map);
 }
 
 // rjf: determine SDF sample position
 float2 sdf_sample_pos = float2((2*vertex2pixel.cornercoord_pct.x-1)*vertex2pixel.rect_half_size_px.x,
                                (2*vertex2pixel.cornercoord_pct.y-1)*vertex2pixel.rect_half_size_px.y);
 
 // rjf: sample for corners
 float corner_sdf_s = RectSDF(sdf_sample_pos,
                              vertex2pixel.rect_half_size_px - float2(vertex2pixel.softness_px*2.f, vertex2pixel.softness_px*2.f),
                              vertex2pixel.corner_radius_px);
 float corner_sdf_t = 1-smoothstep(0, 2*vertex2pixel.softness_px, corner_sdf_s);
 
 // rjf: sample for borders
 float border_sdf_s = RectSDF(sdf_sample_pos,
                              vertex2pixel.rect_half_size_px - float2(vertex2pixel.softness_px*2.f, vertex2pixel.softness_px*2.f) - vertex2pixel.border_thickness_px,
                              max(vertex2pixel.corner_radius_px-vertex2pixel.border_thickness_px, 0));
 float border_sdf_t = smoothstep(0, 2*vertex2pixel.softness_px, border_sdf_s);
 if(vertex2pixel.border_thickness_px == 0)
 {
  border_sdf_t = 1;
 }
 
 // rjf: form+return final color
 float4 final_color = albedo_sample;
 final_color *= tint;
 final_color *= opacity;
 final_color *= corner_sdf_t;
 final_color *= border_sdf_t;
 return final_color;
}
"""

////////////////////////////////
//~ rjf: Sprite Shaders

@embed_string @c r_d3d11_g_sprite3d_shader_src:
"""
//- rjf: resources

cbuffer CmdGlobals : register(b0)
{
 float4x4 xform;
 row_major float4x4 albedo_sample_channel_map;
 float2 albedo_t2d_size_px;
 float alpha_test_min;
}

Texture2D albedo_t2d : register(t0);
SamplerState albedo_t2d_sampler : register(s0);

//- rjf: cpu -> vshad -> pshad types

struct CPU2Vertex
{
 float4 pos_rs          : POS;
 float4x4 xform         : XFM;
 float4 src_rect_px     : TEX;
 float4 color00         : COL0;
 float4 color01         : COL1;
 float4 color10         : COL2;
 float4 color11         : COL3;
 float omit_texture     : OTX;
 float shear            : SHR;
 float2 _unused_        : PAD;
 uint vertex_id         : SV_VertexID;
};

struct Vertex2Pixel
{
 float4 pos_rs          : SV_POSITION;
 float2 texcoord_px     : TEX;
 float4 color00         : COL0;
 float4 color01         : COL1;
 float4 color10         : COL2;
 float4 color11         : COL3;
 float2 colorcoord_pct  : TEX1;
 float omit_texture     : OTX;
};

//- rjf: vertex shader

Vertex2Pixel
vs_main(CPU2Vertex cpu2vertex)
{
 //- rjf: unpack instance data
 float2 src_p0_px  = cpu2vertex.src_rect_px.xy;
 float2 src_p1_px  = cpu2vertex.src_rect_px.zw;
 
 //- rjf: bundle per-vertex attribute arrays, to sample from via vertex ID
 float3 dst_p_verts_rs[] =
 {
  mul(cpu2vertex.xform, float4(-0.5f+cpu2vertex.shear, -0.5f, 0.f, 1.f)).xyz,
  mul(cpu2vertex.xform, float4(-0.5f, +0.5f, 0.f, 1.f)).xyz,
  mul(cpu2vertex.xform, float4(+0.5f+cpu2vertex.shear, -0.5f, 0.f, 1.f)).xyz,
  mul(cpu2vertex.xform, float4(+0.5f, +0.5f, 0.f, 1.f)).xyz,
 };
 float2 src_p_verts_px[] =
 {
  float2(src_p0_px.x, src_p0_px.y),
  float2(src_p0_px.x, src_p1_px.y),
  float2(src_p1_px.x, src_p0_px.y),
  float2(src_p1_px.x, src_p1_px.y),
 };
 float2 dst_c_verts_pct[] =
 {
  float2(0, 1),
  float2(0, 0),
  float2(1, 1),
  float2(1, 0),
 };
 
 //- rjf: produce final vertex position
 float4 pos_rs = cpu2vertex.pos_rs;
 pos_rs.x += dst_p_verts_rs[cpu2vertex.vertex_id].x;
 pos_rs.y += dst_p_verts_rs[cpu2vertex.vertex_id].y;
 pos_rs.z += dst_p_verts_rs[cpu2vertex.vertex_id].z;
 pos_rs = mul(xform, pos_rs);
 
 //- rjf: produce final vertex texcoord
 float2 texcoord_px = src_p_verts_px[cpu2vertex.vertex_id];
 
 //- rjf: produce final vertex colorcoord
 float2 colorcoord_pct = dst_c_verts_pct[cpu2vertex.vertex_id];
 
 //- rjf: fill vertex -> pixel data
 Vertex2Pixel vertex2pixel;
 {
  vertex2pixel.pos_rs         = pos_rs;
  vertex2pixel.texcoord_px    = texcoord_px;
  vertex2pixel.color00        = cpu2vertex.color00;
  vertex2pixel.color01        = cpu2vertex.color01;
  vertex2pixel.color10        = cpu2vertex.color10;
  vertex2pixel.color11        = cpu2vertex.color11;
  vertex2pixel.colorcoord_pct = colorcoord_pct;
  vertex2pixel.omit_texture   = cpu2vertex.omit_texture.x;
 }
 return vertex2pixel;
}

//- rjf: pixel shader

float4
ps_main(Vertex2Pixel vertex2pixel) : SV_TARGET
{
 // rjf: blend corner colors to get final pixel tint
 float4 top_color   = (1-vertex2pixel.colorcoord_pct.x)*vertex2pixel.color00 + (vertex2pixel.colorcoord_pct.x)*vertex2pixel.color10;
 float4 bot_color   = (1-vertex2pixel.colorcoord_pct.x)*vertex2pixel.color01 + (vertex2pixel.colorcoord_pct.x)*vertex2pixel.color11;
 float4 tint        = (1-vertex2pixel.colorcoord_pct.y)*top_color + (vertex2pixel.colorcoord_pct.y)*bot_color;
 
 // rjf: sample albedo texture
 float4 albedo_sample = float4(1, 1, 1, 1);
 if(vertex2pixel.omit_texture < 1)
 {
  float2 texcoord_px = floor(vertex2pixel.texcoord_px) + min(frac(vertex2pixel.texcoord_px)/fwidth(vertex2pixel.texcoord_px), 1.f) - 0.5f;
  albedo_sample = mul(albedo_t2d.Sample(albedo_t2d_sampler, texcoord_px/albedo_t2d_size_px), albedo_sample_channel_map);
  albedo_sample.xyz /= albedo_sample.w;
 }
 
 // rjf: alpha test
 if(albedo_sample.w < alpha_test_min)
 {
  discard;
 }
 
 // rjf: form+return final color
 float4 final_color = albedo_sample;
 final_color *= tint;
 return final_color;
}
"""

////////////////////////////////
//~ rjf: Unlit Compositor Shader

@embed_string @c r_d3d11_g_compositeunlit3d_shader_src:
"""
//- rjf: resources

cbuffer CmdGlobals : register(b0)
{
 float4x4 inverse_view_projection;
 float4x4 shadowmap_view_projection;
 float4 fog_color;
 float pct_fog_per_unit;
 float near_z;
 float far_z;
}

Texture2D albedo_t2d    : register(t0);
Texture2D depth_t2d     : register(t1);
Texture2D shadowmap_t2d : register(t2);
SamplerState albedo_t2d_sampler    : register(s0);
SamplerState depth_t2d_sampler     : register(s1);
SamplerState shadowmap_t2d_sampler : register(s2);

//- rjf: cpu -> vshad -> pshad types

struct CPU2Vertex
{
 uint vertex_id         : SV_VertexID;
};

struct Vertex2Pixel
{
 float4 pos_rs          : SV_POSITION;
 float2 texcoord_pct    : TEX;
};

//- rjf: vertex shader

Vertex2Pixel
vs_main(CPU2Vertex cpu2vertex)
{
 float2 vertices[] =
 {
  float2(-1, -1),
  float2(-1, +1),
  float2(+1, -1),
  float2(+1, +1),
 };
 float2 vertex = vertices[cpu2vertex.vertex_id];
 Vertex2Pixel vertex2pixel;
 {
  vertex2pixel.pos_rs = float4(vertex.x, vertex.y, 0, 1);
  vertex2pixel.texcoord_pct = float2((vertex.x+1)/2, (-vertex.y+1)/2);
 }
 return vertex2pixel;
}

//- rjf: pixel shader

float4
ps_main(Vertex2Pixel vertex2pixel) : SV_TARGET
{
 // rjf: sample albedo buffer
 float4 albedo = albedo_t2d.Sample(albedo_t2d_sampler, vertex2pixel.texcoord_pct);
 
 // rjf: sample depth buffer
 float depth = depth_t2d.Sample(depth_t2d_sampler, vertex2pixel.texcoord_pct).r;
 
 // rjf: clip-space -> world-space
 float4 world_space_pos = float4(0, 0, 0, 0);
 {
  float4 clip_space_pos = float4(2*vertex2pixel.texcoord_pct.x-1,
                                 -(2*vertex2pixel.texcoord_pct.y-1),
                                 depth,
                                 1);
  world_space_pos = mul(inverse_view_projection, clip_space_pos);
  world_space_pos /= world_space_pos.w;
 }
 
 // rjf: world-space -> shadowmap-clip-space
 float4 shadowmap_clip_space_pos = mul(shadowmap_view_projection, world_space_pos);
 shadowmap_clip_space_pos /= shadowmap_clip_space_pos.w;
 
 // rjf: sample shadow map
 float shadow = 0;
 {
  float2 shadowmap_sample_pos_center = float2((shadowmap_clip_space_pos.x+1)/2, 1-(shadowmap_clip_space_pos.y+1)/2);
  float shadow_sum = 0;
  float shadow_count = 0;
  for(int x = -2; x <= 2; x += 1)
  {
   for(int y = -2; y <= 2; y += 1)
   {
    float shadowmap_sample = shadowmap_t2d.Sample(shadowmap_t2d_sampler, shadowmap_sample_pos_center + float2(x/750.f, y/750.f)).r;
    float difference_from_real_depth = shadowmap_clip_space_pos.z-shadowmap_sample;
    if(difference_from_real_depth > 0.003f)
    {
     shadow_sum += 1.f;
    }
    shadow_count += 1;
   }
  }
  shadow = shadow_sum/shadow_count;
 }
 
 // rjf: albedo -> shaded
 float4 shaded = float4(albedo.x * (1 - shadow*0.5),
                        albedo.y * (1 - shadow*0.5),
                        albedo.z * (1 - shadow*0.5),
                        albedo.w * (1 - shadow*0.5));
 
 // rjf: form color
 float4 final_color = shaded;
 return final_color;
}
"""

////////////////////////////////
//~ rjf: Point Light Rasterization Shaders

@embed_string @c r_d3d11_g_pointlight3d_shader_src:
"""
//- rjf: resources

cbuffer CmdGlobals : register(b0)
{
 float4x4 xform;
 float4x4 inverse_view_projection;
}

Texture2D depth_t2d : register(t0);
SamplerState depth_t2d_sampler : register(s0);

//- rjf: cpu -> vshad -> pshad types

struct CPU2Vertex
{
 float3 vtx_pos        : VTX;
 float4 center_pos     : POS;
 float4 color          : COL;
 float4 params         : PRM;
};

struct Vertex2Pixel
{
 float4 pos             : SV_POSITION;
 float4 pos_clip        : CLP;
 float4 ws_pos          : VTX;
 float4 center_pos      : POS;
 float4 color           : COL;
};

//- rjf: vertex shader

Vertex2Pixel
vs_main(CPU2Vertex c2v)
{
 Vertex2Pixel v2p;
 {
  v2p.ws_pos = float4(c2v.vtx_pos.x*c2v.center_pos.w + c2v.center_pos.x,
                      c2v.vtx_pos.y*c2v.center_pos.w + c2v.center_pos.y,
                      c2v.vtx_pos.z*c2v.center_pos.w + c2v.center_pos.z,
                      1.f);
  v2p.pos = mul(xform, v2p.ws_pos);
  v2p.pos_clip = v2p.pos;
  v2p.center_pos = c2v.center_pos;
  v2p.color = c2v.color;
 }
 return v2p;
}

//- rjf: pixel shader

float4
ps_main(Vertex2Pixel v2p) : SV_TARGET
{
 // rjf: build texcoord
 float2 texcoord = float2((v2p.pos_clip.x/v2p.pos_clip.w+1)/2, 1-(v2p.pos_clip.y/v2p.pos_clip.w+1)/2);
 
 // rjf: sample depth buffer
 float depth = depth_t2d.Sample(depth_t2d_sampler, texcoord).r;
 
 // rjf: this pixel's depth > sample -> discard
 if(v2p.pos.z > depth)
 {
  discard;
 }
 
 // rjf: clip-space -> world-space
 float4 world_space_pos = float4(0, 0, 0, 0);
 {
  float4 clip_space_pos = float4(v2p.pos_clip.x/v2p.pos_clip.w,
                                 v2p.pos_clip.y/v2p.pos_clip.w,
                                 depth,
                                 1);
  world_space_pos = mul(inverse_view_projection, clip_space_pos);
  world_space_pos /= world_space_pos.w;
 }
 
 // rjf: world-space * light-center * radius -> light factor
 float light_factor = 0.f;
 {
  float radius = v2p.center_pos.w;
  float3 p2l = world_space_pos.xyz - v2p.center_pos.xyz;
  light_factor = 1-dot(p2l, p2l)/(radius*radius);
 }
 
 // rjf: build final color & export
 float4 color = v2p.color * light_factor;
 return color;
}
"""

////////////////////////////////
//~ rjf: Framebuffer Blit Shader

@embed_string @c r_d3d11_g_framebufferblit_shader_src:
"""
//- rjf: resources

Texture2D src_t2d    : register(t0);
SamplerState src_t2d_sampler    : register(s0);

//- rjf: cpu -> vshad -> pshad types

struct CPU2Vertex
{
 uint vertex_id         : SV_VertexID;
};

struct Vertex2Pixel
{
 float4 pos_rs          : SV_POSITION;
 float2 texcoord_pct    : TEX;
};

//- rjf: vertex shader

Vertex2Pixel
vs_main(CPU2Vertex cpu2vertex)
{
 float2 vertices[] =
 {
  float2(-1, -1),
  float2(-1, +1),
  float2(+1, -1),
  float2(+1, +1),
 };
 float2 vertex = vertices[cpu2vertex.vertex_id];
 Vertex2Pixel vertex2pixel;
 {
  vertex2pixel.pos_rs = float4(vertex.x, vertex.y, 0, 1);
  vertex2pixel.texcoord_pct = float2((vertex.x+1)/2, (-vertex.y+1)/2);
 }
 return vertex2pixel;
}

//- rjf: pixel shader

float4
ps_main(Vertex2Pixel vertex2pixel) : SV_TARGET
{
 float4 color = src_t2d.Sample(src_t2d_sampler, vertex2pixel.texcoord_pct);
 return color;
}
"""

////////////////////////////////
//~ rjf: Lit Compositor Shader

@embed_string @c r_d3d11_g_compositelit3d_shader_src:
"""
//- rjf: resources

cbuffer CmdGlobals : register(b0)
{
 float4x4 inverse_view_projection;
 float4 fog_color;
 float pct_fog_per_unit;
 float near_z;
 float far_z;
}

Texture2D albedo_t2d    : register(t0);
Texture2D depth_t2d     : register(t1);
SamplerState albedo_t2d_sampler    : register(s0);
SamplerState depth_t2d_sampler     : register(s1);

//- rjf: cpu -> vshad -> pshad types

struct CPU2Vertex
{
 uint vertex_id         : SV_VertexID;
};

struct Vertex2Pixel
{
 float4 pos_rs          : SV_POSITION;
 float2 texcoord_pct    : TEX;
};

//- rjf: noise functions (adapted from https://www.shadertoy.com/view/lsf3WH)

float
HashFromInt2(int2 p)
{
 // 2D -> 1D
 int n = p.x*3 + p.y*113;
 
 // 1D hash by Hugo Elias
	n = (n << 13) ^ n;
 n = n * (n * n * 15731 + 789221) + 1376312589;
 return -1.0+2.0*float(n & 0x0fffffff)/float(0x0fffffff);
}

float NoiseFromFloat2(float2 p)
{
 int2 i = int2(floor(p));
 float2 f = frac(p);
 float2 u = f*f*(3.0-2.0*f);
 return lerp(lerp(HashFromInt2(i + int2(0, 0)), 
                  HashFromInt2(i + int2(1, 0)), u.x),
             lerp(HashFromInt2(i + int2(0, 1)), 
                  HashFromInt2(i + int2(1, 1)), u.x), u.y);
}

//- rjf: vertex shader

Vertex2Pixel
vs_main(CPU2Vertex cpu2vertex)
{
 float2 vertices[] =
 {
  float2(-1, -1),
  float2(-1, +1),
  float2(+1, -1),
  float2(+1, +1),
 };
 float2 vertex = vertices[cpu2vertex.vertex_id];
 Vertex2Pixel vertex2pixel;
 {
  vertex2pixel.pos_rs = float4(vertex.x, vertex.y, 0, 1);
  vertex2pixel.texcoord_pct = float2((vertex.x+1)/2, (-vertex.y+1)/2);
 }
 return vertex2pixel;
}

//- rjf: pixel shader

float4
ps_main(Vertex2Pixel vertex2pixel) : SV_TARGET
{
 // rjf: sample albedo buffer
 float4 albedo = albedo_t2d.Sample(albedo_t2d_sampler, vertex2pixel.texcoord_pct);
 
 // rjf: sample depth buffer
 float depth = depth_t2d.Sample(depth_t2d_sampler, vertex2pixel.texcoord_pct).r;
 
 // rjf: clip-space -> world-space
 float4 world_space_pos = float4(0, 0, 0, 0);
 {
  float4 clip_space_pos = float4(2*vertex2pixel.texcoord_pct.x-1,
                                 -(2*vertex2pixel.texcoord_pct.y-1),
                                 depth,
                                 1);
  world_space_pos = mul(inverse_view_projection, clip_space_pos);
  world_space_pos /= world_space_pos.w;
 }
 
 // rjf: generate world-space noise
 float world_space_noise = 0;
 {
  float2 noisecoord = world_space_pos.xy;
  float2x2 m = float2x2(1.6f, 1.2f, -1.2f, 1.6f);
  world_space_noise = 0.5000f*NoiseFromFloat2(noisecoord);
  noisecoord = mul(m, noisecoord);
  world_space_noise += 0.2500f*NoiseFromFloat2(noisecoord);
  noisecoord = mul(m, noisecoord);
  world_space_noise += 0.1250f*NoiseFromFloat2(noisecoord);
  noisecoord = mul(m, noisecoord);
  world_space_noise += 0.0625f*NoiseFromFloat2(noisecoord);
  noisecoord = mul(m, noisecoord);
  world_space_noise = (world_space_noise+1)/2;
 }
 
 // rjf: depth -> linearized depth -> fog_pct
 float linear_depth = (near_z*far_z) / (far_z + depth*(near_z-far_z));
 float fog_pct = saturate(pct_fog_per_unit*linear_depth);
 
 // rjf: albedo -> fogged
 float4 fogged = float4(albedo.x + (fog_color.x-albedo.x)*fog_pct,
                        albedo.y + (fog_color.y-albedo.y)*fog_pct,
                        albedo.z + (fog_color.z-albedo.z)*fog_pct,
                        albedo.w + (fog_color.w-albedo.w)*fog_pct);
 
 // rjf: form color
 float4 final_color = fogged;
 return final_color;
}
"""

////////////////////////////////
//~ rjf: Debug Line (3D) Shaders

@embed_string @c r_d3d11_g_debugline3d_shader_src:
"""
//- rjf: resources

cbuffer CmdGlobals : register(b0)
{
 float4x4 xform;
}

//- rjf: cpu -> vshad -> pshad types

struct CPU2Vertex
{
 float4 p0_rs   : POS0;
 float4 p1_rs   : POS1;
 float4 c0      : COL0;
 float4 c1      : COL1;
 uint vertex_id : SV_VertexID;
};

struct Vertex2Pixel
{
 float4 pos_rs : SV_POSITION;
 float4 color  : COL;
};

//- rjf: vertex shader

Vertex2Pixel
vs_main(CPU2Vertex cpu2vertex)
{
 float4 p0_rs = cpu2vertex.p0_rs;
 float4 p1_rs = cpu2vertex.p1_rs;
 float4 c0 = cpu2vertex.c0;
 float4 c1 = cpu2vertex.c1;
 float4 verts_pos[] =
 {
  mul(xform, p0_rs),
  mul(xform, p1_rs),
 };
 float4 verts_col[] =
 {
  c0,
  c1,
 };
 Vertex2Pixel vertex2pixel;
 {
  vertex2pixel.pos_rs = verts_pos[cpu2vertex.vertex_id];
  vertex2pixel.color  = verts_col[cpu2vertex.vertex_id];
 }
 return vertex2pixel;
}

//- rjf: pixel shader

float4
ps_main(Vertex2Pixel vertex2pixel) : SV_TARGET
{
 return vertex2pixel.color;
}

"""
